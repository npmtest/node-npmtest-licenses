{"/home/travis/build/npmtest/node-npmtest-licenses/test.js":"/* istanbul instrument in package npmtest_licenses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-licenses/lib.npmtest_licenses.js":"/* istanbul instrument in package npmtest_licenses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_licenses = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_licenses = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-licenses/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-licenses && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_licenses */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_licenses\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_licenses.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_licenses.rollup.js'] =\n            local.assetsDict['/assets.npmtest_licenses.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_licenses.__dirname + '/lib.npmtest_licenses.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/index.js":"'use strict';\n\nvar debug = require('debug')('licenses::parse')\n  , opensource = require('./opensource')\n  , async = require('async')\n  , url = require('url');\n\nvar Registry;\n\n/**\n * Start searching for license information for the given module name.\n *\n * Options:\n *\n * - githulk: A pre-configured githulk instance.\n * - order: The order of resolving license information.\n * - npmjs: A pre-configured npm-registry instance.\n * - registry: A registry to use for the npmjs instance.\n *\n * @param {Mixed} name The module name or the package.json contents.\n * @param {Object} options Configuration of the parse process.\n * @param {Function} fn Callback.\n * @api public\n */\nfunction parse(name, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  //\n  // Fix circular require.\n  //\n  if (!Registry) Registry = require('npm-registry');\n\n  options = options || {};\n  options.githulk = options.githulk || null;\n  options.order = options.order || ['registry', 'github', 'content'];\n  options.registry = options.registry || Registry.mirrors.nodejitsu;\n  options.npmjs = 'string' !== typeof options.registry\n    ? options.registry\n    : new Registry({\n    registry: options.registry || Registry.mirrors.nodejitsu,\n    githulk: options.githulk\n  });\n\n  async.waterfall([\n    //\n    // Make sure that we have the correct contents to start searching for\n    // license information.\n    //\n    function fetch(next) {\n      if ('string' !== typeof name) return next(undefined, name);\n\n      options.npmjs.packages.get(name, next);\n    },\n\n    //\n    // Search for the correct way of parsing out the license information.\n    //\n    function search(data, next) {\n      if (!options.order.length) return next();\n      if (Array.isArray(data)) data = data[0];\n\n      debug('searching for licensing information for %s', data.name);\n\n      var parser, result, name;\n\n      async.doWhilst(function does(next) {\n        name = options.order.shift();\n        parser = parse.parsers[name];\n\n        if (!parser.supported(data)) return next();\n\n        debug('attempting to extract the license information using: %s', name);\n\n        parser.parse(data, options, function parsed(err, license) {\n          if (err) return next();\n\n          result = license;\n          if (result) debug('parsing with %s was successful', name);\n\n          next();\n        });\n      }, function select() {\n        return !result && options.order.length;\n      }, function cleanup(err) {\n        options = null;\n        next(err, result, name);\n      });\n    }\n  ], fn);\n}\n\n/**\n * Retrieve addition license information based on the returned results. The\n * returned object can contain the following properties\n *\n * - full: A human readable but long string of the license name.\n * - name: The same name as you already provided.\n * - id: An uppercase unique ID of the license.\n *\n * - file *optional*: The name of license file's content.\n * - url *optional*: The location where people can read the terms.\n *\n * @param {String} name The name of the license.\n * @returns {Object|Undefined}\n * @api public\n */\nparse.info = function info(name) {\n  return opensource.licenses[name];\n};\n\n//\n// Expose the Parser class so we easily add new parsers through third-party if\n// needed. (Think bitbucket and other code hosting sites)\n//\nparse.Registry = require('./registry'); // Parse license out of package\nparse.Content = require('./content');   // Parse license of out file content.\nparse.Parser  = require('./parser');    // Base parser class.\nparse.Github  = require('./github');    // Parse license info from github.\n\n//\n// Expose our primary parsers that we can leverage to retrieve license content.\n//\nparse.parsers = {};\nparse.parsers.registry  = new parse.Registry(parse.parsers);\nparse.parsers.content   = new parse.Content(parse.parsers);\nparse.parsers.github    = new parse.Github(parse.parsers);\n\n//\n// Expose the actual module.\n//\nmodule.exports = parse;\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/opensource.js":"'use strict';\n\n/**\n * Contains a mapping for license id -> license name.\n *\n * @type {Object}\n * @public\n */\nexports.types = Object.create(null);\n\n/**\n * Contains a mapping for license name -> license object.\n *\n * @type {Object}\n * @public\n */\nexports.licenses = Object.create(null);\n\n/**\n * The full license information.\n *\n * @type {Array}\n * @public\n */\nexports.full = [\n  {\n    id: 'AFL2',\n    name: 'AFL 2.1',\n    full: 'Academic Free License 2.1',\n    file: 'AFL2.1.txt'\n  },\n  {\n    id: 'AFL3',\n    name: 'AFL 3.0',\n    full: 'Academic Free License 3.0',\n    url: 'http://opensource.org/licenses/AFL-3.0',\n    tldr: 'https://tldrlegal.com/license/academic-free-license-3.0-(afl)',\n    file: 'AFL3.0.txt'\n  },\n  {\n    id: 'AGPL3',\n    name: 'AGPL 3.0',\n    full: 'GNU Affero General Public License 3.0',\n    url: 'http://opensource.org/licenses/AGPL-3.0',\n    tldr: 'https://tldrlegal.com/license/gnu-affero-general-public-license-v3-(agpl-3.0)',\n    file: 'AGPL3.0.txt'\n  },\n  {\n    id: 'CCBY4',\n    name: 'CC 4.0 BY',\n    full: 'Creative Commons Attribution 4.0',\n    url: 'http://creativecommons.org/licenses/by/4.0/'\n  },\n  {\n    id: 'CCBYND4',\n    name: 'CC 4.0 BY-ND',\n    full: 'Creative Commons Attribution NoDerivs 4.0',\n    url: 'http://creativecommons.org/licenses/by-nd/4.0/'\n  },\n  {\n    id: 'CCBYSA4',\n    name: 'CC 4.0 BY-SA',\n    full: 'Creative Commons Attribution ShareAlike 4.0',\n    url: 'http://creativecommons.org/licenses/by-sa/4.0/'\n  },\n  {\n    id: 'CCBYNC4',\n    name: 'CC 4.0 BY-NC',\n    full: 'Creative Commons Attribution Non Commerical 4.0',\n    url: 'http://creativecommons.org/licenses/by-nc/4.0/'\n  },\n  {\n    id: 'CCBYNCSA',\n    name: 'CC 4.0 BY-NC-SA',\n    full: 'Creative Commons Attribution Non Commerical ShareAlike 4.0',\n    url: 'http://creativecommons.org/licenses/by-nc-sa/4.0/'\n  },\n  {\n    id: 'CCBYNCND4',\n    name: 'CC 4.0 BY-NC-ND',\n    full: 'Creative Commons Attribution Non Commerical NoDerivs 4.0',\n    url: 'http://creativecommons.org/licenses/by-nc-nd/4.0/'\n  },\n  {\n    id: 'CCBY3',\n    name: 'CC 3.0 BY',\n    full: 'Creative Commons Attribution 3.0',\n    url: 'http://creativecommons.org/licenses/by/3.0/'\n  },\n  {\n    id: 'CCBYND3',\n    name: 'CC 3.0 BY-ND',\n    full: 'Creative Commons Attribution NoDerivs 3.0',\n    url: 'http://creativecommons.org/licenses/by-nd/3.0/'\n  },\n  {\n    id: 'CCBYSA3',\n    name: 'CC 3.0 BY-SA',\n    full: 'Creative Commons Attribution ShareAlike 3.0',\n    url: 'http://creativecommons.org/licenses/by-sa/3.0/'\n  },\n  {\n    id: 'CCBYNC3',\n    name: 'CC 3.0 BY-NC',\n    full: 'Creative Commons Attribution Non Commerical 3.0',\n    url: 'http://creativecommons.org/licenses/by-nc/3.0/'\n  },\n  {\n    id: 'CCBYNCSA3',\n    name: 'CC 3.0 BY-NC-SA',\n    full: 'Creative Commons Attribution Non Commerical ShareAlike 3.0',\n    url: 'http://creativecommons.org/licenses/by-nc-sa/3.0/'\n  },\n  {\n    id: 'CCBYNCND3',\n    name: 'CC 3.0 BY-NC-ND',\n    full: 'Creative Commons Attribution Non Commerical NoDerivs 3.0',\n    url: 'http://creativecommons.org/licenses/by-nc-nd/3.0/'\n  },\n  {\n    id: 'CCBY25',\n    name: 'CC 2.5 BY',\n    full: 'Creative Commons Attribution 2.5',\n    url: 'http://creativecommons.org/licenses/by/2.5/'\n  },\n  {\n    id: 'CCBYND25',\n    name: 'CC 2.5 BY-ND',\n    full: 'Creative Commons Attribution NoDerivs 2.5',\n    url: 'http://creativecommons.org/licenses/by-nd/2.5/'\n  },\n  {\n    id: 'CCBYSA25',\n    name: 'CC 2.5 BY-SA',\n    full: 'Creative Commons Attribution ShareAlike 2.5',\n    url: 'http://creativecommons.org/licenses/by-sa/2.5/'\n  },\n  {\n    id: 'CCBYNC25',\n    name: 'CC 2.5 BY-NC',\n    full: 'Creative Commons Attribution Non Commerical 2.5',\n    url: 'http://creativecommons.org/licenses/by-nc/2.5/'\n  },\n  {\n    id: 'CCBYNCSA25',\n    name: 'CC 2.5 BY-NC-SA',\n    full: 'Creative Commons Attribution Non Commerical ShareAlike 2.5',\n    url: 'http://creativecommons.org/licenses/by-nc-sa/2.5/'\n  },\n  {\n    id: 'CCBYNCND25',\n    name: 'CC 2.5 BY-NC-ND',\n    full: 'Creative Commons Attribution Non Commerical NoDerivs 2.5',\n    url: 'http://creativecommons.org/licenses/by-nc-nd/2.5/'\n  },\n  {\n    id: 'APL1',\n    name: 'APL 1.0',\n    full: 'Adaptive Public License',\n    url: 'http://opensource.org/licenses/APL-1.0',\n    file: 'APL-1.0.txt'\n  },\n  {\n    id: 'ARTISTIC2',\n    name: 'Artistic 2.0',\n    full: 'Artistic license, Version 2.0',\n    url: 'http://opensource.org/licenses/Artistic-2.0',\n    tldr: 'https://tldrlegal.com/license/artistic-license-2.0-(artistic)',\n    file: 'Artistic2.0.txt'\n  },\n  {\n    id: 'Apache2',\n    name: 'Apache 2.0',\n    full: 'Apache License, Version 2.0',\n    url: 'http://opensource.org/licenses/Apache-2.0',\n    tldr: 'https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)',\n    file: 'Apache2.0.txt'\n  },\n  {\n    id: 'APSL2',\n    name: 'Apple 2.0',\n    full: 'Apple Public Source License 2.0',\n    url: 'http://opensource.org/licenses/APSL-2.0',\n    tldr: 'https://tldrlegal.com/license/apple-public-source-license-2.0-(apsl)',\n    file: 'APSL-2.0.txt'\n  },\n  {\n    id: 'AAL',\n    name: 'AAL',\n    full: 'Attribution Assurance License',\n    url: 'http://opensource.org/licenses/AAL',\n    file: 'AAL.txt'\n  },\n  {\n    id: 'Apache',\n    name: 'Apache',\n    full: 'Apache License, Version 1.0',\n    url: 'http://www.apache.org/licenses/LICENSE-1.0',\n    file: 'Apache1.0.txt'\n  },\n  {\n    id: 'BEER',\n    name: 'Beerware',\n    full: 'BEER-WARE License',\n    url: 'http://en.wikipedia.org/wiki/Beerware',\n    tldr: 'https://tldrlegal.com/license/beerware-license',\n    file: 'beerware.txt'\n  },\n  {\n    id: 'BSD2',\n    name: 'BSD 2-Clause',\n    full: 'BSD 2-Clause \"Simplified\" or \"FreeBSD\" License',\n    url: 'http://opensource.org/licenses/BSD-2-Clause',\n    tldr: 'https://tldrlegal.com/license/bsd-2-clause-license-(freebsd)',\n    file: 'BSD-2-Clause.txt'\n  },\n  {\n    id: 'BSD3',\n    name: 'BSD 3-Clause',\n    full: 'BSD 3-Clause \"New\" or \"Revised\" License',\n    url: 'http://opensource.org/licenses/BSD-3-Clause',\n    tldr: 'https://tldrlegal.com/license/bsd-3-clause-license-(revised)',\n    file: 'BSD-3-Clause.txt'\n  },\n  {\n    id: 'BSD',\n    name: 'BSD 4-Clause',\n    full: 'BSD 4-Clause or Original BSD license',\n    url: 'http://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29',\n    file: 'BSD.txt'\n  },\n  {\n    id: 'BSL1',\n    name: 'BSL 1.0',\n    full: 'Boost Software License',\n    url: 'http://opensource.org/licenses/BSL-1.0',\n    tldr: 'https://tldrlegal.com/license/boost-software-license-1.0-explained',\n    file: 'BSL1.0.txt'\n  },\n  {\n    id: 'CECILL21',\n    name: 'CECILL-2.1',\n    full: 'Cea Cnrs Inria Logiciel Libre License, version 2.1',\n    url: 'http://opensource.org/licenses/CECILL-2.1',\n    file: 'CECILL-2.1.txt'\n  },\n  {\n    id: 'CATOSL11',\n    name: 'CATOSL-1.1',\n    full: 'Computer Associates Trusted Open Source License 1.1',\n    url: 'http://opensource.org/licenses/CATOSL-1.1',\n    file: 'CATOSL1.1.txt'\n  },\n  {\n    id: 'CDDL1',\n    name: 'CDDL 1.0',\n    full: 'Common Development and Distribution License Version 1.0',\n    url: 'http://opensource.org/licenses/CDDL-1.0',\n    tldr: 'https://tldrlegal.com/license/common-development-and-distribution-license-(cddl-1.0)-explained',\n    file: 'cddl1.txt'\n  },\n  {\n    id: 'CPAL1',\n    name: 'CPAL 1.0',\n    full: 'Common Public Attribution License Version 1.0',\n    url: 'http://opensource.org/licenses/CPAL-1.0',\n    tldr: 'https://tldrlegal.com/license/common-public-attribution-license-version-1.0-(cpal-1.0)',\n    file: 'CPAL1.0.txt'\n  },\n  {\n    id: 'CUAOPL1',\n    name: 'CUA-OPL 1.0',\n    full: 'CUA Office Public License Version 1.0',\n    url: 'http://opensource.org/licenses/CUA-OPL-1.0',\n    file: 'CUAOPL1.0.txt'\n  },\n  {\n    id: 'EUDATAGRID',\n    name: 'EUDatagrid',\n    full: 'EU DataGrid Software License',\n    url: 'http://opensource.org/licenses/EUDatagrid',\n    file: 'EUDATAGRID.txt'\n  },\n  {\n    id: 'EPL1',\n    name: 'EPL 1.0',\n    full: 'Eclipse Public License 1.0',\n    url: 'http://opensource.org/licenses/EPL-1.0',\n    tldr: 'https://tldrlegal.com/license/eclipse-public-license-1.0-(epl-1.0)',\n    file: 'EPL-1.0.txt'\n  },\n  {\n    id: 'ECL2',\n    name: 'ECL 2.0',\n    full: 'Educational Community License, Version 2.0',\n    url: 'http://opensource.org/licenses/ECL-2.0',\n    file: 'ECL2.0.txt'\n  },\n  {\n    id: 'EFL2',\n    name: 'EFL 2.0',\n    full: 'Eiffel Forum License, Version 2',\n    url: 'http://opensource.org/licenses/EFL-2.0',\n    file: 'EFL2.0.txt'\n  },\n  {\n    id: 'ENTESSA',\n    name: 'Entessa',\n    full: 'Entessa Public License Version. 1.0',\n    url: 'http://opensource.org/licenses/Entessa',\n    file: 'ENTESSA.txt'\n  },\n  {\n    id: 'EUPL1',\n    name: 'EUPL 1.1',\n    full: 'European Union Public License, version 1.1',\n    url: 'https://joinup.ec.europa.eu/system/files/EN/EUPL%20v.1.1%20-%20Licence.pdf',\n    tldr: 'https://tldrlegal.com/license/european-union-public-licence',\n    file: 'EUPL1.1.txt'\n  },\n  {\n    id: 'FAIR',\n    name: 'Fair',\n    full: 'Fair License',\n    url: 'http://opensource.org/licenses/Fair',\n    tldr: 'https://tldrlegal.com/license/fair-license',\n    file: 'FAIR.txt'\n  },\n  {\n    id: 'FRAMEWORX',\n    name: 'Frameworx 1.0',\n    full: 'The Frameworx Open License 1.0',\n    url: 'http://opensource.org/licenses/Frameworx-1.0',\n    file: 'Frameworx1.0.txt'\n  },\n  {\n    id: 'GPL2',\n    name: 'GPL 2.0',\n    full: 'GNU General Public License version 2.0',\n    url: 'http://opensource.org/licenses/GPL-2.0',\n    tldr: 'https://tldrlegal.com/license/gnu-general-public-license-v2',\n    file: 'GPL-2.0.txt'\n  },\n  {\n    id: 'GPL3',\n    name: 'GPL 3.0',\n    full: 'GNU General Public License version 3.0',\n    url: 'http://opensource.org/licenses/GPL-3.0',\n    tldr: 'https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)',\n    file: 'GPL-3.0.txt'\n  },\n  {\n    id: 'GPL',\n    name: 'GPL',\n    full: 'GNU General Public License',\n    url: 'https://www.gnu.org/copyleft/gpl.html',\n    file: 'GPL.txt'\n  },\n  {\n    id: 'ISC',\n    name: 'ISC',\n    full: 'ISC License',\n    url: 'http://opensource.org/licenses/ISC',\n    tldr: 'https://tldrlegal.com/license/-isc-license',\n    file: 'ISC.txt'\n  },\n  {\n    id: 'LPPL13',\n    name: 'LPPL 1.3c',\n    full: 'LaTeX Project Public License, Version 1.3c',\n    url: 'http://opensource.org/licenses/LPPL-1.3c',\n    file: 'LPPL-1.3.txt'\n  },\n  {\n    id: 'LPL',\n    name: 'LPL 1.02',\n    full: 'Lucent Public License Version 1.02',\n    url: 'http://opensource.org/licenses/LPL-1.02',\n    file: 'LPL-1.02.txt'\n  },\n  {\n    id: 'MIROS',\n    name: 'MirOS',\n    full: 'MirOS License',\n    url: 'http://opensource.org/licenses/MirOS',\n    file: 'MIROS.txt'\n  },\n  {\n    id: 'MSPL',\n    name: 'MS-PL',\n    full: 'Microsoft Public License',\n    url: 'http://opensource.org/licenses/MS-PL',\n    file: 'MS-PL.txt'\n  },\n  {\n    id: 'MSRL',\n    name: 'MS-RL',\n    full: 'Microsoft Reciprocal License',\n    url: 'http://opensource.org/licenses/MS-RL',\n    file: 'MS-RL.txt'\n  },\n  {\n    id: 'JSON',\n    name: 'JSON.org',\n    full: 'The JSON License',\n    url: 'http://www.json.org/license.html',\n    file: 'JSON.txt'\n  },\n  {\n    id: 'LGPL2',\n    name: 'LGPL 2.1',\n    full: 'GNU Library or \"Lesser\" General Public License version 2.1',\n    url: 'http://opensource.org/licenses/LGPL-2.1',\n    tldr: 'https://tldrlegal.com/license/gnu-lesser-general-public-license-v2.1-(lgpl-2.1)',\n    file: 'LGPL-2.1.txt'\n  },\n  {\n    id: 'LGPL3',\n    name: 'LGPL 3.0',\n    full: 'GNU Library or \"Lesser\" General Public License version 3.0',\n    url: 'http://opensource.org/licenses/LGPL-3.0',\n    file: 'LGPL-3.0.txt'\n  },\n  {\n    id: 'LGPL',\n    name: 'LGPL',\n    full: 'GNU Lesser General Public License',\n    url: 'https://www.gnu.org/licenses/lgpl.html',\n    file: 'LGPL.txt'\n  },\n  {\n    id: 'HPND',\n    name: 'HPND',\n    full: 'Historical Permission Notice and Disclaimer',\n    url: 'http://opensource.org/licenses/HPND',\n    file: 'HPND.txt'\n  },\n  {\n    id: 'IPL1',\n    name: 'IPL 1.0',\n    full: 'IBM Public License Version 1.0',\n    url: 'http://opensource.org/licenses/IPL-1.0',\n    tldr: 'https://tldrlegal.com/license/ibm-public-license-1.0-(ipl)',\n    file: 'IPL-1.0.txt'\n  },\n  {\n    id: 'IPA',\n    name: 'IPA',\n    full: 'IPA Font License Agreement v1.0',\n    url: 'http://opensource.org/licenses/IPA',\n    tldr: 'https://tldrlegal.com/license/ipa-font-license-(ipa)',\n    file: 'IPA.txt'\n  },\n  {\n    id: 'MIT',\n    name: 'MIT',\n    full: 'The MIT License',\n    url: 'http://opensource.org/licenses/MIT',\n    tldr: 'https://tldrlegal.com/license/mit-license',\n    file: 'MIT.txt'\n  },\n  {\n    id: 'MOTOSOTO',\n    name: 'Motosoto',\n    full: 'Motosoto Open Source License',\n    url: 'http://opensource.org/licenses/Motosoto',\n    file: 'MOTOSOTO.txt'\n  },\n  {\n    id: 'MPL2',\n    name: 'MPL 2.0',\n    full: 'Mozilla Public License 2.0',\n    url: 'http://opensource.org/licenses/MPL-2.0',\n    tldr: 'https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2)',\n    file: 'MPL-2.0.txt'\n  },\n  {\n    id: 'MPL',\n    name: 'MPL 1.0',\n    full: 'Mozilla Public License Version 1.0',\n    url: 'http://opensource.org/licenses/MPL-1.0',\n    file: 'MPL-1.0.txt'\n  },\n  {\n    id: 'MULTICS',\n    name: 'Multics',\n    full: 'Multics License',\n    url: 'http://opensource.org/licenses/Multics',\n    file: 'MULTICS.txt'\n  },\n  {\n    id: 'NASA1',\n    name: 'NASA 1.3',\n    full: 'NASA Open Source Agreement v1.3',\n    url: 'http://opensource.org/licenses/NASA-1.3',\n    file: 'nasa.txt'\n  },\n  {\n    id: 'NTP',\n    name: 'NTP',\n    full: 'NTP License',\n    url: 'http://opensource.org/licenses/NTP',\n    file: 'NTP.txt'\n  },\n  {\n    id: 'NAUMEN',\n    name: 'NAUMEN',\n    full: 'NAUMEN Public License',\n    url: 'http://opensource.org/licenses/Naumen',\n    file: 'NAUMEN.txt'\n  },\n  {\n    id: 'NGPL',\n    name: 'NGPL',\n    full: 'The Nethack General Public License',\n    url: 'http://opensource.org/licenses/NGPL',\n    file: 'NGPL.txt'\n  },\n  {\n    id: 'NOKIA',\n    name: 'Nokia',\n    full: 'Nokia Open Source License',\n    url: 'http://opensource.org/licenses/Nokia',\n    file: 'Nokia.txt'\n  },\n  {\n    id: 'NPOLSL30',\n    name: 'NPOSL 3.0',\n    full: 'Non-Profit Open Software License 3.0',\n    url: 'http://opensource.org/licenses/NPOSL-3.0',\n    file: 'NPOSL-3.0.txt'\n  },\n  {\n    id: 'OCLC2',\n    name: 'OCLC 2.0',\n    full: 'The OCLC Research Public License 2.0 License',\n    url: 'http://opensource.org/licenses/OCLC-2.0',\n    file: 'OCLC-2.0.txt'\n  },\n  {\n    id: 'OFL11',\n    name: 'OFL 1.1',\n    full: 'SIL Open Font License',\n    url: 'http://opensource.org/licenses/OFL-1.1',\n    tldr: 'https://tldrlegal.com/license/open-font-license-(ofl)-explained',\n    file: 'OFL-1.1.txt'\n  },\n  {\n    id: 'OSL30',\n    name: 'OSL 3.0',\n    full: 'Open Software License v. 3.0',\n    url: 'http://opensource.org/licenses/OSL-3.0',\n    file: 'OSL-3.0.txt'\n  },\n  {\n    id: 'PHP30',\n    name: 'PHP 3.0',\n    full: 'PHP License 3.0',\n    url: 'http://opensource.org/licenses/PHP-3.0',\n    tldr: 'https://tldrlegal.com/license/php-license-3.0-(php)',\n    file: 'PHP-3.0.txt'\n  },\n  {\n    id: 'POSTGRESQL',\n    name: 'PostgreSQL',\n    full: 'PostgreSQL Licence',\n    url: 'http://opensource.org/licenses/PostgreSQL',\n    file: 'PostgreSQL.txt'\n  },\n  {\n    id: 'PROPRIETARY',\n    name: 'Proprietary',\n    full: 'Proprietary'\n  },\n  {\n    id: 'PSF',\n    name: 'Python 2.0',\n    full: 'Python Software Foundation License Version 2.0',\n    url: 'http://opensource.org/licenses/Python-2.0',\n    tldr: 'https://tldrlegal.com/license/python-license-2.0',\n    file: 'Python2.txt'\n  },\n  {\n    id: 'CNRI',\n    name: 'CNRI Python',\n    full: 'CNRI portion of the multi-part Python License',\n    url: 'http://opensource.org/licenses/CNRI-Python',\n    file: 'CNRI.txt'\n  },\n  {\n    id: 'QPL',\n    name: 'QPL 1.0',\n    full: 'Q Public License Version 1.0',\n    url: 'http://opensource.org/licenses/QPL-1.0',\n    file: 'QPL-1.0.txt'\n  },\n  {\n    id: 'RPSL',\n    name: 'RPSL 1.0',\n    full: 'RealNetworks Public Source License Version 1.0',\n    url: 'http://opensource.org/licenses/RPSL-1.0',\n    file: 'RPSL.txt'\n  },\n  {\n    id: 'RPL',\n    name: 'RPL 1.5',\n    full: 'Reciprocal Public License 1.5',\n    url: 'http://opensource.org/licenses/RPL-1.5',\n    file: 'RPL-1.5.txt'\n  },\n  {\n    id: 'RSCPL',\n    name: 'RSCPL',\n    full: 'Ricoh Source Code Public License',\n    url: 'http://opensource.org/licenses/RSCPL',\n    file: 'RSCPL.txt'\n  },\n  {\n    id: 'SIMPL',\n    name: 'SimPL 2.0',\n    full: 'Simple Public License 2.0',\n    url: 'http://opensource.org/licenses/SimPL-2.0',\n    tldr: 'https://tldrlegal.com/license/simple-public-license-2.0-(simpl)',\n    file: 'SIMPL-2.0.txt'\n  },\n  {\n    id: 'SLEEPYCAT',\n    name: 'Sleepycat',\n    full: 'Sleepycat License',\n    url: 'http://opensource.org/licenses/Sleepycat',\n    tldr: 'https://tldrlegal.com/license/sleepycat-license',\n    file: 'SLEEPYCAT.txt'\n  },\n  {\n    id: 'SPL',\n    name: 'SPL 1.0',\n    full: 'Sun Public License, Version 1.0',\n    url: 'http://opensource.org/licenses/SPL-1.0',\n    file: 'SPL-1.0.txt'\n  },\n  {\n    id: 'WATCOM',\n    name: 'Watcom 1.0',\n    full: 'Sybase Open Source Watcom Public License Version 1.0',\n    url: 'http://opensource.org/licenses/Watcom-1.0',\n    file: 'Watcom-1.0.txt'\n  },\n  {\n    id: 'NCSA',\n    name: 'NCSA',\n    full: 'The University of Illinois/NCSA Open Source License',\n    url: 'http://opensource.org/licenses/NCSA',\n    tldr: 'https://tldrlegal.com/license/university-of-illinois---ncsa-open-source-license-(ncsa)',\n    file: 'NCSA.txt'\n  },\n  {\n    id: 'VSL-1.0',\n    name: 'VSL 1.0',\n    full: 'The Vovida Software License v. 1.0',\n    url: 'http://opensource.org/licenses/VSL-1.0',\n    file: 'VSL-1.0.txt'\n  },\n  {\n    id: 'W3C',\n    name: 'W3C',\n    full: 'W3C® Software Notice and License',\n    url: 'http://opensource.org/licenses/W3C',\n    file: 'W3C.txt'\n  },\n  {\n    id: 'WXWINDOWS',\n    name: 'WXwindows',\n    full: 'wxWindows Library Licence',\n    url: 'http://opensource.org/licenses/WXwindows',\n    file: 'WXwindows.txt'\n  },\n  {\n    id: 'XNET',\n    name: 'Xnet',\n    full: 'X.Net, Inc. License',\n    url: 'http://opensource.org/licenses/Xnet',\n    file: 'XNet.txt'\n  },\n  {\n    id: 'ZPL20',\n    name: 'ZPL 2.0',\n    full: 'Zope Public License (ZPL) Version 2.0',\n    url: 'http://opensource.org/licenses/ZPL-2.0',\n    file: 'ZPL-2.0.txt'\n  },\n  {\n    id: 'PUBLIC',\n    name: 'Public Domain',\n    full: 'Public Domain'\n  },\n  {\n    id: 'UNLICENSE',\n    name: 'Unlicense',\n    full: 'Unlicense',\n    url: 'http://unlicense.org',\n    file: 'UNLICENSE.txt'\n  },\n  {\n    id: 'WTFPL',\n    name: 'WTFPL',\n    full: 'Do What the Fuck You Want to Public License',\n    url: 'http://www.wtfpl.net',\n    tldr: 'https://tldrlegal.com/license/do-wtf-you-want-to-public-license-v2-(wtfpl-2.0)',\n    file: 'WTFPL.txt'\n  },\n  {\n    id: 'ZLIB',\n    name: 'zlib/libpng',\n    full: 'zlib/libpng License',\n    url: 'http://opensource.org/licenses/Zlib',\n    tldr: 'https://tldrlegal.com/license/zlib-libpng-license-(zlib)',\n    file: 'zlib.txt'\n  }\n].map(function each(license) {\n  exports.types[license.id] = license.name;\n  exports.licenses[license.name] = license;\n\n  return license;\n});\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/registry.js":"'use strict';\n\nvar debug = require('debug')('licenses::npm');\n\n/**\n * Parser for npm based license information.\n *\n * @constructor\n * @api public\n */\nmodule.exports = require('./parser').extend({\n  /**\n   * The name of this parser.\n   *\n   * @type {String}\n   * @private\n   */\n  name: 'npm',\n\n  /**\n   * Parse the npm license information from the package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @param {Object} options Optional options.\n   * @param {Function} next Continuation.\n   * @api public\n   */\n  parse: function parse(data, options, next) {\n    data = this.get(data);\n\n    if ('function' === typeof options) {\n      next = options;\n      options = {};\n    }\n\n    //\n    // We cannot detect a license so we call the callback without any arguments\n    // which symbolises a failed attempt.\n    //\n    if (!data) return next();\n\n    debug('found %s in the package contents', data);\n\n    // @TODO handle the edge case where people give us an URL instead of an\n    // actual license.\n    next(undefined, this.normalize(data));\n  },\n\n  /**\n   * Return the possible location of license information.\n   *\n   * @param {Object} data The object that should contain the license.\n   * @returns {String}\n   * @api private\n   */\n  license: function licenses(data) {\n    if ('string' === typeof data && data) return data;\n    if ('type' in data && data.type) return data.type;\n\n    //\n    // Common typo's\n    //\n    if ('type:' in data && data['type:']) return data['type:'];\n\n    return;\n  },\n\n  /**\n   * Is npm based license detection an option for this package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @returns {Boolean}\n   * @api public\n   */\n  supported: function supported(data) {\n    return !!this.get(data);\n  },\n\n  /**\n   * Retrieve the possible locations of the license information.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @returns {Array}\n   * @api private\n   */\n  get: function get(data) {\n    var parser = this\n      , matches = [];\n\n    //\n    // Another npm oddity, it allows licenses to be specified in to different\n    // properties. Because why the fuck not?\n    //\n    ['license', 'licenses'].forEach(function each(key) {\n      if ('string' === typeof data[key]) {\n        return matches.push(data[key]);\n      }\n\n      if (Array.isArray(data[key])) {\n        return Array.prototype.push.apply(\n          matches,\n          data[key].map(function map(item) {\n            return parser.license(item);\n          }).filter(Boolean)\n        );\n      }\n\n      if ('object' === typeof data[key] && parser.license(data[key])) {\n        return Array.prototype.push.apply(\n          matches,\n          [parser.license(data[key])]\n        );\n      }\n    });\n\n    if (matches.length) return matches;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/parser.js":"'use strict';\n\nvar debug = require('debug')('licenses::parser')\n  , normalized = require('./normalize')\n  , GitHulk = require('githulk')\n  , fuse = require('fusing')\n  , fs = require('fs');\n\n/**\n * The base parser class where all parsers inherit from. This provides some\n * common functionality which the parsers can use to detect licensing.\n *\n * @constructor\n * @param {Object} parsers An object which contains all available parsers.\n * @api public\n */\nfunction Parser(parsers) {\n  if (!(this instanceof Parser)) return new Parser(parsers);\n\n  this.parsers = parsers;\n}\n\nfuse(Parser);\n\n/**\n * Expose some core modules through the instance.\n *\n * @type {Function}\n * @api pubilc\n */\nParser.readable('async', require('async'));\n\n/**\n * Simple regular expression based tests for figuring out which license we're\n * dealing with.\n *\n * @param {String} str\n * @returns {Array}\n * @api public\n */\nParser.readable('test', function test(str) {\n  if (/BSD/.test(str)) return ['BSD'];\n  if (/GPL/.test(str) || /GPLv2/.test(str)) return ['GPL'];\n  if (/LGPL/.test(str)) return ['LGPL'];\n  if (/MIT/.test(str) || /\\(MIT\\)/.test(str)) return ['MIT'];\n  if (/Apache\\s?Licen[cs]e/.test(str)) return ['Apache'];\n  if (/MPL/.test(str)) return ['MPL'];\n\n  //\n  // Watch out we've got a bad-ass over here.\n  //\n  if (/DO\\sWHAT\\sTHE\\sFUCK\\sYOU\\sWANT\\sTO\\sPUBLIC\\sLICEN[CS]E/i.test(str)\n   || /WTFPL/.test(str)\n  ) return ['WTFPL'];\n});\n\n/**\n * There are 1000 ways of writing that you're using an MIT module. This\n * normalization module attempts to normalize the licenses in to one common\n * name.\n *\n * @param {Array} data A list of license information that needs to be normalized.\n * @api public\n */\nParser.readable('normalize', function normalize(data) {\n  if (!data) return data;\n\n  //\n  // First we need to pass the data through our dual license checker so can\n  // figure out if the module is dual licensed as both license values needs to\n  // be normalized.\n  return this.dual(data).map(function map(license) {\n    //\n    // 1. Direct match. Check for direct matches against our normalized license\n    //    file.\n    //\n    if (license in normalized) {\n      debug('normalized %s to %s using the \"direct match\" method', license, normalized[license]);\n      return normalized[license];\n    }\n\n    //\n    // 2. toUpperCase. Transform the given license string and the key of\n    //    normalization to lowercase to see if it matches.\n    //\n    var transformed = license.toUpperCase();\n    if (transformed in normalized) {\n      debug('normalized %s to %s using the \"transform\" method', license, normalized[transformed]);\n      return normalized[transformed];\n    }\n\n    return license;\n  }).filter(function duplicate(item, index, all) {\n    if (!item) return false;\n    return all.indexOf(item) === index;\n  });\n});\n\nvar githulk = new GitHulk();\n\n/**\n * Reference to our githulk.\n *\n * @type {GitHulk}\n * @api public\n */\nParser.readable('githulk', githulk);\n\n/**\n * Find an URL in the data structure.\n *\n * @param {Object} data Data structure\n * @param {String} contains A string that the URL should contain.\n * @api public\n */\nParser.readable('url', githulk.project.url);\n\n/**\n * Check for potential dual licensing in the given license arrays. Most people\n * specify them in their package.json as : MIT/GPL because the `npm init`\n * doesn't really allow dual licensing.\n *\n * It supports the following possibilities:\n *\n * - MIT/GPL\n * - MIT and GPL\n * - MIT or GPL\n * - MIT, GPL\n *\n * @param {Array} licenses\n * @returns {Array} licenses\n * @api public\n */\nParser.readable('dual', function dual(licenses) {\n  var licensing = [];\n\n  if (!licenses) return [];\n\n  return licenses.reduce(function reduce(licenses, license) {\n    license = (license || '').trim();\n    if (!license) return licenses;\n\n    //\n    // Edge case, it's possible that people use Apache, Version 2.0 as licensing\n    // we don't want to split this as a dual license as it's License name,\n    // Version notation. We add these edge-cases directly in to our normalizer.\n    //\n    if (license in normalized) {\n      licenses.push(license);\n      return licenses;\n    }\n\n    Array.prototype.push.apply(\n      licenses,\n      license.split(/\\s{0,}(?:\\/|\\sand\\s|\\sor\\s|,)\\s{0,}/g)\n    );\n\n    return licenses;\n  }, []).filter(function duplicate(item, index, all) {\n    if (!item) return false;\n    return all.indexOf(item) === index;\n  });\n});\n\n/**\n * Tokenizer for the license files so we can figure how much lines of text from\n * the given license matches against a string.\n *\n * @param {String} str The content that needs to get tokenized.\n * @param {Number} amount The amount of words we should combine.\n * @api private\n */\nParser.readable('tokenizer', function tokenizer(str, amount) {\n  var tokens = str.toLowerCase().split(/\\W+/g).filter(Boolean);\n\n  if (!amount) return tokens.join('');\n\n  return tokens.reduce(function reduce(words, word, index) {\n    if (!reduce.index) reduce.index = 0;\n    if (!reduce.position) {\n      reduce.position = 0;\n      words.push([]);\n    }\n\n    words[reduce.index][++reduce.position] = word;\n\n    //\n    // We've reached our maximum amount of words that we allow for matching so\n    // we need to concat our collection of words in to a single string to\n    // improve matching.\n    //\n    if (reduce.position === amount || index === (tokens.length - 1)) {\n      words[reduce.index] = words[reduce.index].join('');\n      reduce.position = 0;\n      reduce.index++;\n    }\n\n    return words;\n  }, []);\n});\n\n/**\n * Scan the given string for occurrences of the license text. If the given\n * percentage of matching lines is reached, we'll assume a match.\n *\n * @param {String} str The string that needs to have licence matching.\n * @param {Number} percentage Percentage for accepted match.\n * @returns {Array} License name if we have a match.\n * @api public\n */\nParser.readable('scan', function scan(str, percentage) {\n  percentage = percentage || 80;\n  str = this.tokenizer(str);\n\n  var matches = []\n    , match;\n\n  this.licenses.forEach(function each(license) {\n    var test = {\n      total: license.content.length,\n      license: license.name,\n      percentage: 0,\n      matches: 0\n    };\n\n    license.content.forEach(function each(line) {\n      if (str.indexOf(line) !== -1) test.matches++;\n    });\n\n    test.percentage = test.matches / test.total * 100;\n    if (test.percentage >= percentage) matches.push(test);\n\n    debug('had a %s% match for %s', test.percentage, test.license);\n  });\n\n  match = matches.sort(function sort(a, b) {\n    return a.percentage < b.percentage;\n  })[0];\n\n  if (match) return [match.license];\n});\n\n/**\n * The contents of various of license types that we can use for comparison.\n *\n * @type {Array}\n * @api private\n */\nParser.readable('licenses',\n  require('./opensource').full.filter(function filter(license) {\n    return !!license.file;\n  }).map(function map(license) {\n  license.content = this.tokenizer(\n    fs.readFileSync(__dirname +'/licenses/'+ license.file, 'utf-8'),\n    5\n  );\n\n  return license;\n}.bind(Parser.prototype)));\n\n//\n// Expose the parser.\n//\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/normalize.js":"'use strict';\n\nvar opensource = require('./opensource')\n  , license = opensource.types;\n\n//\n// Map commonly used terms to a normal license value as you can usually specify\n// your license type in so many ways. By mapping this, we can create a more\n// readable format for each license type.\n//\nvar normalized = {\n  '\"BSD\"': license.BSD,\n  '(Un)license': license.UNLICENSE,\n  '2-clause BSD': license.BSD2,\n  '3-clause BSD': license.BSD3,\n  'AFLv2.1': license.AFL2,\n  'AGPL 3': license.AGPL3,\n  'AGPL 3.0': license.AGPL3,\n  'AGPL v3': license.AGPL3,\n  'AGPL': license.AGPL3,\n  'AGPL-3': license.AGPL3,\n  'AGPL-3.0': license.AGPL3,\n  'AGPL3': license.AGPL3,\n  'AGPLv3': license.AGPL3,\n  'AGPLv3+': license.AGPL3,\n  'ALv2': license.AFL2,\n  'APACHE 2.0': license.Apache2,\n  'APACHE V2.0': license.Apache2,\n  'APACHE': license.Apache,\n  'APACHE-2.0': license.Apache2,\n  'APACHE2': license.Apache2,\n  'APACHE2.0': license.Apache2,\n  'APACHE2_0': license.Apache2,\n  'APACHEv2': license.Apache2,\n  'APL': license.APL1,\n  'APLv2': license.Apache2,\n  'ARTISTIC 2.0': license.ARTISTIC2,\n  'Affero General Public License v3': license.AGPL3,\n  'Apache (2.0)': license.Apache2,\n  'Apache 2 License': license.Apache2,\n  'Apache 2': license.Apache2,\n  'Apache 2.0': license.Apache2,\n  'Apache License 2': license.Apache2,\n  'Apache License 2.0': license.Apache2,\n  'Apache License Version 2': license.Apache2,\n  'Apache License Version 2.0': license.Apache2,\n  'Apache License v2': license.Apache2,\n  'Apache License v2.0': license.Apache2,\n  'Apache License version 2.0': license.Apache2,\n  'Apache License': license.Apache,\n  'Apache License, Version 2.0': license.Apache2,\n  'Apache License, Version 2.0, http://www.apache.org/licenses/LICENSE-2.0': license.Apache2,\n  'Apache Public License (version 2)': license.Apache2,\n  'Apache Public License v2': license.Apache2,\n  'Apache Public License, Version 2': license.Apache2,\n  'Apache Software License 2.0': license.Apache2,\n  'Apache V2': license.Apache2,\n  'Apache V2.0': license.Apache2,\n  'Apache v2 License': license.Apache2,\n  'Apache v2 license': license.Apache,\n  'Apache v2': license.Apache2,\n  'Apache v2.0': license.Apache2,\n  'Apache version 2.0': license.Apache2,\n  'Apache': license.Apache,\n  'Apache, Version 2.0': license.Apache2,\n  'Apache-2': license.Apache2,\n  'Apache-2.0': license.Apache2,\n  'Apache-V2': license.Apache2,\n  'Apache2': license.Apache2,\n  'Apache2.0': license.Apache2,\n  'Appcelerator Proprietary and Confidential': license.PROPRIETARY,\n  'Artistic-2.0': license.ARTISTIC2,\n  'Attribution-NonCommercial 2.5 Generic (CC BY-NC 2.5)': license.CCBYNC25,\n  'Attribution-ShareAlike 3.0 Unported': license.CCBYSA3,\n  'BOOST': license.BSL1,\n  'BSD 2 Clause': license.BSD2,\n  'BSD 2-Clause License': license.BSD2,\n  'BSD 2-Clause license': license.BSD2,\n  'BSD 2-Clause': license.BSD2,\n  'BSD 2-clause license': license.BSD2,\n  'BSD 3-Clause License': license.BSD3,\n  'BSD 3-Clause': license.BSD3,\n  'BSD License': license.BSD,\n  'BSD New': license.BSD3,\n  'BSD': license.BSD,\n  'BSD-2-Clause': license.BSD2,\n  'BSD-3': license.BSD3,\n  'BSD-3-Clause': license.BSD3,\n  'BSD-new': license.BSD3,\n  'BSD2': license.BSD2,\n  'BSD3': license.BSD3,\n  'BeerWare': license.BEER,\n  'Beerware': license.BEER,\n  'CC BY-NC 3.0': license.CCBYNC3,\n  'CC BY-NC': license.CCBYNC3,\n  'CC BY-NC-SA': license.CCBYNCSA3,\n  'CC BY-SA 3.0': license.CCBYSA3,\n  'CC BY-SA v3.0': license.CCBYSA3,\n  'CC': license.CCBY3,\n  'CC-0': license.CCBY3,\n  'CC-BY 2.0': license.CCBY25,\n  'CC-BY-NC-SA': license.CCBYNCSA3,\n  'CC-BY-SA': license.CCBYSA3,\n  'CC-By-SA 3.0': license.CCBYSA3,\n  'CC-SA-BY-3.0': license.CCBYSA3,\n  'CC-by-SA': license.CCBYSA3,\n  'CC0 1.0': license.CCBY3,\n  'CC3': license.CCBY3,\n  'CC_by_3.0': license.CCBY3,\n  'CDDL': license.CDDL1,\n  'Closed Source': license.PROPRIETARY,\n  'Copyrighted - CC BY-NC-ND': license.CCBYNCND3,\n  'Creative Commons - Attribution 3.0': license.CCBY3,\n  'Creative Commons 3.0': license.CCBY3,\n  'Creative Commons Attribution 3.0 Unported License': license.CCBY3,\n  'Creative Commons Attribution': license.CCBY3,\n  'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)': license.CCBYNCSA3,\n  'Creative Commons Attribution-ShareAlike 3.0 Unported': license.CCBYSA3,\n  'Creative Commons Attribution-ShareAlike 3.0': license.CCBYSA3,\n  'Creative Commons BY-NC-SA License 3.0': license.CCBYNCSA3,\n  'Creative Commons Legal Code Attribution-NonCommercial-NoDerivs 3.0': license.CCBYNCND3,\n  'Creative Commons License 2.5': license.CCBY25,\n  'Creative Commons attribution and share-alike license': license.CCBYSA3,\n  'Creative Commons': license.CCBY3,\n  'DO-WHAT-YOU-WANT': license.WTFPL,\n  'DWTFYW': license.WTFPL,\n  'Do What the Fuck You Want to Public License': license.WTFPL,\n  'Doug Crockford\\'s license that allows this module to be used for Good but not for Evil': license.JSON,\n  'Free as in Hugs Licence': license.PUBLIC,\n  'Free as in Hugs License': license.PUBLIC,\n  'Free as in Hugs': license.PUBLIC,\n  'Free': license.PUBLIC,\n  'FreeBSD': license.BSD2,\n  'GLP v.3': license.GPL3,\n  'GLP v2.0': license.GPL2,\n  'GLP': license.GPL,\n  'GNU AFFERO GENERAL PUBLIC LICENSE': license.AGPL3,\n  'GNU AGPL v3.0': license.AGPL3,\n  'GNU Affero General Public License': license.AGPL3,\n  'GNU GENERAL PUBLIC LICENSE': license.GPL,\n  'GNU GPL 2': license.GPL2,\n  'GNU GPL V3': license.GPL3,\n  'GNU GPL v3': license.GPL3,\n  'GNU GPL': license.GPL,\n  'GNU GPLv3': license.GPL3,\n  'GNU General Public License': license.GPL,\n  'GNU LGPL v3.0': license.LGPL3,\n  'GNU LGPL': license.LGPL,\n  'GNU Library General Public License': license.LGPL,\n  'GNU v3': license.GPL3,\n  'GNU': license.GPL,\n  'GNU-GPL-2': license.GPL2,\n  'GPL 2': license.GPL2,\n  'GPL 2.0': license.GPL2,\n  'GPL 3': license.GPL3,\n  'GPL 3.0': license.GPL3,\n  'GPL Version 3': license.GPL3,\n  'GPL v2': license.GPL2,\n  'GPL v2+': license.GPL2,\n  'GPL v3': license.GPL3,\n  'GPL v3.0': license.GPL3,\n  'GPL': license.GPL,\n  'GPL-2': license.GPL2,\n  'GPL-2.0': license.GPL2,\n  'GPL-3': license.GPL3,\n  'GPL-3.0': license.GPL3,\n  'GPL-v2': license.GPL2,\n  'GPL2': license.GPL2,\n  'GPL3': license.GPL3,\n  'GPLv2 (or later)': license.GPL3,\n  'GPLv2': license.GPL2,\n  'GPLv3': license.GPL3,\n  'GPOL': license.GPL,\n  'Google-BSD': license.BSD,\n  'ISC (http://www.isc.org/software/license)': license.ISC,\n  'ISC License': license.ISC,\n  'ISC': license.ISC,\n  'JSON': license.JSON,\n  'LGP': license.LGPL,\n  'LGPL 2.1': license.LGPL2,\n  'LGPL 2.1+': license.LGPL2,\n  'LGPL 3': license.LGPL3,\n  'LGPL 3.0': license.LGPL3,\n  'LGPL License': license.LGPL,\n  'LGPL V3': license.LGPL3,\n  'LGPL v3': license.LGPL3,\n  'LGPL': license.LGPL,\n  'LGPL+': license.LGPL,\n  'LGPL-2': license.LGPL2,\n  'LGPL-3': license.LGPL3,\n  'LGPL-3.0': license.LGPL3,\n  'LGPL3': license.LGPL3,\n  'LGPL3.0': license.LGPL3,\n  'LGPLv2.1': license.GPL2,\n  'LGPLv2.1+': license.LGPL2,\n  'LGPLv21': license.LGPL2,\n  'LGPLv3': license.LGPL3,\n  'LGPLv3+': license.LGPL3,\n  'LGPLv3.0': license.LGPL3,\n  'MIT ': license.MIT,\n  'MIT (http://mootools.net/license.txt)': license.MIT,\n  'MIT <http://opensource.org/licenses/MIT>': license.MIT,\n  'MIT Licence': license.MIT,\n  'MIT License (see License)': license.MIT,\n  'MIT License (see Readme)': license.MIT,\n  'MIT License': license.MIT,\n  'MIT license': license.MIT,\n  'MIT': license.MIT,\n  'MIT-License': license.MIT,\n  'MIT/X': license.MIT,\n  'MIT/X11': license.MIT,\n  'MPL 1.1': license.MPL,\n  'MPL 2.0': license.MPL2,\n  'MPL v2.0': license.MPL2,\n  'MPL': license.MPL,\n  'MPL-2': license.MPL2,\n  'MPL-2.0': license.MPL2,\n  'MPL/2.0': license.MPL2,\n  'MPL2': license.MPL2,\n  'MPL2.0': license.MPL2,\n  'MPLv2': license.MPL2,\n  'MPLv2.0': license.MPL2,\n  'MTI': license.MIT,\n  'Mit': license.MIT,\n  'Modified MIT / BSD': license.BSD,\n  'Mozilla Public License 2.0': license.MPL2,\n  'Mozilla Public License Version 2.0': license.MPL2,\n  'Mozilla Public License': license.MPL,\n  'NASA-1.3': license.NASA1,\n  'NEW BSD': license.BSD3,\n  'New BSD License': license.BSD3,\n  'New BSD': license.BSD3,\n  'New-BSD': license.BSD3,\n  'NewBSD': license.BSD3,\n  'Open Source- GPL': license.GPL,\n  'PROPRIETARY': license.PROPRIETARY,\n  'PSF': license.PSF,\n  'PUBLIC DOMAIN (UNLICENSED)': license.PUBLIC,\n  'PUBLIC LICENSE': license.PUBLIC,\n  'Private': license.PROPRIETARY,\n  'Proprietary': license.PROPRIETARY,\n  'Public Domain': license.PUBLIC,\n  'Public domain': license.PUBLIC,\n  'Simplified BSD (see License)': license.BSD2,\n  'Simplified BSD License': license.BSD2,\n  'Simplified BSD-3': license.BSD3,\n  'The MIT Licence': license.MIT,\n  'The MIT License (MIT)': license.MIT,\n  'The MIT License': license.MIT,\n  'The Software shall be used for Good, not Evil. (see LICENSE)': license.JSON,\n  'To Use: WTFPL, To Contribute: Dojo CLA': license.WTFPL,\n  'UNLICENSE': license.UNLICENSE,\n  'UNLICENSED': license.UNLICENSE,\n  'Unlicense <http://unlicense.org/>': license.UNLICENSE,\n  'Unlicense': license.UNLICENSE,\n  'WTFPL': license.WTFPL,\n  'WTFPLv2': license.WTFPL,\n  'X11 License': license.MIT,\n  'X11': license.MIT,\n  'X11-style': license.MIT,\n  'ZLIB': license.ZLIB,\n  'apache 2': license.Apache2,\n  'apache 2.0': license.Apache2,\n  'apache2 actually': license.Apache2,\n  'apache2': license.Apache2,\n  'apachev2': license.Apache2,\n  'bsd': license.BSD,\n  'cc-by-sa': license.CCBYSA3,\n  'free': license.PUBLIC,\n  'freeBSD': license.BSD3,\n  'gnu': license.GPL,\n  'gpl-3.0': license.GPL3,\n  'gpl-v3.0': license.GPL3,\n  'http://creativecommons.org/licenses/by/3.0/': license.CCBY3,\n  'http://opensource.org/licenses/MIT': license.MIT,\n  'http://unlicense.org/': license.UNLICENSE,\n  'http://wtfpl.org': license.WTFPL,\n  'http://wtfpl.org/': license.WTFPL,\n  'http://www.apache.org/licenses/LICENSE-2.0': license.Apache2,\n  'http://www.apache.org/licenses/LICENSE-2.0.txt': license.Apache2,\n  'mit': license.MIT,\n  'mti': license.MIT,\n  'my own': license.PROPRIETARY,\n  'new BSD': license.BSD3,\n  'no': license.PUBLIC,\n  'none': license.PUBLIC,\n  'nokia': license.NOKIA,\n  'nokos': license.NOKIA,\n  'propriatry': license.PROPRIETARY,\n  'proprietary': license.PROPRIETARY,\n  'public domain': license.PUBLIC,\n  'unlicense': license.UNLICENSE,\n  'unlicensed': license.UNLICENSE,\n  'wtfpl': license.WTFPL,\n  'zlib': license.ZLIB,\n  'zlib/libpng': license.ZLIB\n};\n\n//\n// Ensure that we didn't create any undefined references and pre-transform the\n// normalized values for a higher hit rate.\n//\nObject.keys(normalized).map(function check(key) {\n  var uppercase = key.toUpperCase()\n    , lowercase = key.toLowerCase();\n\n  //\n  // This throw is here for development reasons. If we incorrectly referenced\n  // a license.id it will throw.\n  //\n  if (!normalized[key]) throw new Error('Invalid reference for:'+ key);\n\n  if (!normalized[uppercase]) normalized[uppercase] = normalized[key];\n  if (!normalized[lowercase]) normalized[lowercase] = normalized[key];\n});\n\n//\n// Also merge in all the data from our full license database.\n//\nopensource.full.forEach(function each(license) {\n  var name = license.name || ''\n    , full = license.full || ''\n    , url = license.url || ''\n    , id = license.id || '';\n\n  [\n    id,\n    id.toUpperCase(),\n    id.toLowerCase(),\n    url,\n    url.toUpperCase(),\n    url.toLowerCase(),\n    name,\n    name.toUpperCase(),\n    name.toLowerCase(),\n    full,\n    full.toUpperCase(),\n    full.toLowerCase()\n  ].forEach(function each(key) {\n    if (key && !normalized[key]) normalized[key] = license.name;\n  });\n});\n\n//\n// Expose all the mapping.\n//\nmodule.exports = normalized;\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/content.js":"'use strict';\n\nvar debug = require('debug')('licenses::content');\n\nmodule.exports = require('./parser').extend({\n  /**\n   * The name of this parser.\n   *\n   * @type {String}\n   * @private\n   */\n  name: 'content',\n\n  /**\n   * Parse the markdown information from the package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @param {Object} options Optional options.\n   * @param {Function} next Continuation.\n   * @api public\n   */\n  parse: function parse(data, options, next) {\n    data = this.get(data);\n\n    if ('function' === typeof options) {\n      next = options;\n      options = {};\n    }\n\n    //\n    // We cannot detect a license so we call the callback without any arguments\n    // which symbolises a failed attempt.\n    //\n    if (!data) return next();\n\n    //\n    // Optimize the matches by trying to locate where the licensing information\n    // starts in the given content. Usually, we, as developers add it at the\n    // bottom of our README.md files and prefix it with \"LICENSE\" as header.\n    //\n    if (data.file && /readme/i.test(data.file)) {\n      data.content.split('\\n')\n        .some(function some(line, index, lines) {\n          if (\n            /^.{0,7}\\s{0,}(?:licen[cs]e[s]?|copyright).{0,2}\\s{0,}$/gim.test(\n              line.trim())\n          ) {\n            data.content = lines.slice(index).join('\\n');\n            debug('matched %s as license header, slicing data', JSON.stringify(line));\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    var license = this.scan(data.content);\n    if (!license) {\n      license = this.test(data.content);\n\n      if (license) debug('used regexp to detect %s in content', license);\n    } else {\n      debug('license file scan resulted in %s as matching license', license);\n    }\n\n\n    next(undefined, this.normalize(license));\n  },\n\n  /**\n   * Is content based license detection an option for this package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @returns {Boolean}\n   * @api public\n   */\n  supported: function supported(data) {\n    return !!this.get(data);\n  },\n\n  /**\n   * Retrieve the only possible location of data. Which is the `readme` content\n   * but that's only available for packages that are retrieved through npm.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   */\n  get: function get(data) {\n    if ('string' === typeof data) return { content: data };\n    if (data.readme) return { content: data.readme, file: 'readme' };\n    if (data.content) return data;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-licenses/node_modules/licenses/github.js":"'use strict';\n\nvar debug = require('debug')('licenses::github')\n  , url = require('url');\n\n/**\n * Parser for github based URL.\n *\n * @constructor\n * @api public\n */\nmodule.exports = require('./parser').extend({\n  /**\n   * The name of this parser.\n   *\n   * @type {String}\n   * @private\n   */\n  name: 'github',\n\n  /**\n   * All the filenames that we're interested in from Github that can potentially\n   * contain the license information.\n   *\n   * The extensions which are added are\n   *\n   * @type {Array}\n   * @api private\n   */\n  filenames: [\n    'license',\n    'licence',\n    'readme',\n  ].concat([\n    'markdown', 'mdown', 'md', 'textile', 'rdoc', 'org', 'creole', 'mediawiki',\n    'rst', 'asciidoc', 'adoc', 'asc', 'pod'\n  ].reduce(function flatten(slim, extension) {\n    slim.push('license.'+ extension, 'readme.'+ extension, 'licence.'+ extension);\n    return slim;\n  }, [])),\n\n  /**\n   * Parse the github information from the package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @param {Object} options Optional options.\n   * @param {Function} next Continuation.\n   * @api public\n   */\n  parse: function parse(data, options, next) {\n    data = this.get(data);\n\n    if ('function' === typeof options) {\n      next = options;\n      options = {};\n    }\n\n    //\n    // We cannot detect a license so we call the callback without any arguments\n    // which symbolises a failed attempt.\n    //\n    if (!data) return next();\n\n    var githulk = options.githulk || this.githulk\n      , project = data.user +'/'+ data.repo\n      , parser = this;\n\n    githulk.repository.moved(project, function moved(err, github, changed) {\n      if (err) return next(err);\n      if (changed) project = github.user +'/'+ github.repo;\n\n      githulk.repository.contents(project, function contents(err, files) {\n        if (err || !files || !files.length) return next(err);\n\n        //\n        // Check if we have any compatible.\n        //\n        files = files.filter(function filter(file) {\n          var name = file.name.toLowerCase();\n\n          // No size, not really useful for matching.\n          if (file.size <= 0) return false;\n\n          // Fast case, direct match.\n          if (!!~parser.filenames.indexOf(name)) return true;\n\n          // Slow case, partial match.\n          return parser.filenames.some(function some(filename) {\n            return !!~name.indexOf(filename);\n          });\n        }).sort(function sort(a, b) {\n          if (a.name > b.name) return 1;\n          if (b.name < b.name) return -1;\n          return 0;\n        });\n\n        if (!files.length) return next();\n\n        //\n        // Stored the matching license.\n        //\n        var license;\n\n        //\n        // Fetch and parse the 'raw' content of the file so we can parse it.\n        //\n        parser.async.doWhilst(function does(next) {\n          var file = files.shift();\n\n          debug('searching %s for license information', file.name);\n\n          githulk.repository.raw(project, {\n            path: file.name\n          }, function raw(err, data) {\n            if (err) return next(err);\n\n            parser.parsers.content.parse({\n              content: Array.isArray(data) ? data[0] : data,\n              file: file.name\n            }, function parse(err, data) {\n              license = data;\n\n              if (license) debug('extracted %s from %s', data, file.name);\n              next(err);\n            });\n          });\n        }, function select() {\n          return !license && files.length;\n        }, function done(err) {\n          next(err, license);\n        });\n      });\n    });\n  },\n\n  /**\n   * Is github based license detection an option for this package.\n   *\n   * @param {Object} data The package.json or npm package contents.\n   * @returns {Boolean}\n   * @api public\n   */\n  supported: function supported(data) {\n    return !!this.get(data);\n  },\n\n  /**\n   * Get the actual contents that we're interested in, in this case it's the\n   * location of a potential github URL.\n   *\n   * @param {Object} data The package.json or the npm package contents.\n   * @return {String} Returns the URL or undefined.\n   * @api private\n   */\n  get: function get() {\n    return this.githulk.project.apply(this, arguments);\n  }\n});\n"}